if &compatible
  set nocompatible               " Be iMproved
endif

set mouse=a
set nu

set cursorline
set tabstop=4 expandtab shiftwidth=2 smarttab autoindent

" set noshowmode
set wildmenu
set termguicolors
set clipboard=unnamed
" set laststatus=0
set noswapfile

set updatetime=50
set nobackup
set nowritebackup
set cmdheight=2
set hidden
set signcolumn=yes
set shortmess+=c
set completeopt=menuone,noselect

" Searching 
set hlsearch
set incsearch
set ignorecase
set smartcase
set showmatch
set icm=nosplit

call plug#begin('~/.vim/plugged')
Plug 'arzg/vim-swift'
Plug 'neovim/nvim-lspconfig'
Plug 'nvim-lua/lsp-status.nvim'
Plug 'ray-x/lsp_signature.nvim'
Plug 'justinmk/vim-syntax-extra'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}  " We recommend updating the parsers on update
Plug 'sjl/badwolf'
Plug 'folke/lsp-colors.nvim'
Plug 'AlessandroYorba/Alduin'
Plug 'dominikduda/vim_current_word'
Plug 'hrsh7th/nvim-compe'
Plug 'norcalli/nvim-colorizer.lua'
Plug 'tpope/vim-commentary'
Plug 'tpope/vim-sleuth'
Plug 'hoob3rt/lualine.nvim'
Plug 'tmsvg/pear-tree'
Plug 'dag/vim-fish'
Plug 'ziglang/zig.vim'
Plug 'LnL7/vim-nix'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'kyazdani42/nvim-tree.lua'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'
Plug 'yuezk/vim-js'
Plug 'cespare/vim-toml'
Plug 'rust-lang/rust.vim'
Plug 'tpope/vim-abolish'
Plug 'arzg/vim-rust-syntax-ext'
Plug 'PeterRincker/vim-searchlight'
Plug 'APZelos/blamer.nvim'
Plug 'haze/sitruuna.vim'
Plug 'farmergreg/vim-lastplace'
Plug 'romgrk/nvim-treesitter-context'
Plug 'JoosepAlviste/nvim-ts-context-commentstring'
Plug 'darfink/vim-plist'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'rktjmp/lush.nvim'
Plug 'nvim-treesitter/playground'
Plug '~/src/based'
call plug#end()

filetype plugin indent on
syntax enable
set background=dark

" vim-commentary custom filetype comments
autocmd FileType rust setlocal commentstring=//\ %s
autocmd FileType swift setlocal commentstring=//\ %s

map <C-j> :cn<CR>
map <C-k> :cp<CR>

set autoread

let g:netrw_liststyle = 3
let g:netrw_banner = 0
autocmd CompleteDone * pclose
autocmd StdinReadPre * let s:std_in=1

map <silent> <C-e> :NvimTreeToggle<CR>

nnoremap <S-j> :m .+1<CR>==
nnoremap <S-k> :m .-2<CR>==
" inoremap <S-j> <Esc>:m .+1<CR>==gi
" inoremap <S-k> <Esc>:m .-2<CR>==gi
vnoremap <S-j> :m '>+1<CR>gv=gv
vnoremap <S-k> :m '<-2<CR>gv=gv

" fzf key bindings
nnoremap <silent> <S-F> :Files<CR>
nnoremap <silent> <S-Tab> :Rg<CR>

" Show/Hide 
imap <c-x><c-k> <plug>(fzf-complete-word)
imap <c-x><c-f> <plug>(fzf-complete-path)
imap <c-x><c-j> <plug>(fzf-complete-file-ag)
imap <c-x><c-l> <plug>(fzf-complete-line)

" Use Q to show documentation in preview window
nnoremap <silent> Q :call <SID>show_documentation()<CR>

" Send x's from z to blackhole reg
nnoremap z "_x
vnoremap z "_x


nnoremap c "_c
vnoremap c "_c

nnoremap :W :w

let g:fzf_layout = { 'window': 'below 15split enew' }

" Customize fzf colors to match your color scheme
let g:fzf_colors = {
      \ 'fg':      ['fg', 'Normal'],
      \ 'bg':      ['bg', 'Normal'],
      \ 'hl':      ['fg', 'Comment'],
      \ 'fg+':     ['fg', 'CursorLine', 'CursorColumn', 'Normal'],
      \ 'bg+':     ['bg', 'CursorLine', 'CursorColumn'],
      \ 'hl+':     ['fg', 'Statement'],
      \ 'info':    ['fg', 'PreProc'],
      \ 'border':  ['fg', 'Ignore'],
      \ 'prompt':  ['fg', 'Conditional'],
      \ 'pointer': ['fg', 'Exception'],
      \ 'marker':  ['fg', 'Keyword'],
      \ 'spinner': ['fg', 'Label'],
      \ 'header':  ['fg', 'Comment'] }

" Enable per-command history.
" CTRL-N and CTRL-P will be automatically bound to next-history and
" previous-history instead of down and up. If you don't like the change,
" explicitly bind the keys to down and up in your $FZF_DEFAULT_OPTS.
let g:fzf_history_dir = '~/.local/share/fzf-history'

" Command for git grep
" - fzf#vim#grep(command, with_column, [options], [fullscreen])
command! -bang -nargs=* GGrep
      \ call fzf#vim#grep(
      \   'git grep --line-number '.shellescape(<q-args>), 0,
      \   { 'dir': systemlist('git rev-parse --show-toplevel')[0] }, <bang>0)

" Override Colors command. You can safely do this in your .vimrc as fzf.vim
" will not override existing commands.
command! -bang Colors
      \ call fzf#vim#colors({'left': '15%', 'options': '--reverse --margin 30%,0'}, <bang>0)

" Augmenting Ag command using fzf#vim#with_preview function
"   * fzf#vim#with_preview([[options], preview window, [toggle keys...]])
"     * For syntax-highlighting, Ruby and any of the following tools are required:
"       - Highlight: http://www.andre-simon.de/doku/highlight/en/highlight.php
"       - CodeRay: http://coderay.rubychan.de/
"       - Rouge: https://github.com/jneen/rouge
"
"   :Ag  - Start fzf with hidden preview window that can be enabled with "?" key
"   :Ag! - Start fzf in fullscreen and display the preview window above
command! -bang -nargs=* Ag
      \ call fzf#vim#ag(<q-args>,
      \                 <bang>0 ? fzf#vim#with_preview('up:60%')
      \                         : fzf#vim#with_preview('right:50%:hidden', '?'),
      \                 <bang>0)

function! RipgrepFzf(query, fullscreen)
  let command_fmt = 'rg --column --line-number --no-heading --color=always --smart-case %s || true'
  let initial_command = printf(command_fmt, shellescape(a:query))
  let reload_command = printf(command_fmt, '{q}')
  let spec = {'options': ['--color', 'fg:-1,bg:-1,hl:230,fg+:3,bg+:233,hl+:229', '--color', 'info:150,prompt:110,spinner:150,pointer:167,marker:174', '--phony', '--query', a:query, '--bind', 'change:reload:'.reload_command]}
  call fzf#vim#grep(initial_command, 1, fzf#vim#with_preview(spec), a:fullscreen)
endfunction

command! -nargs=* -bang Rg call RipgrepFzf(<q-args>, <bang>0)

" Likewise, Files command with preview window
command! -bang -nargs=? -complete=dir Files
      \ call fzf#vim#files(<q-args>, fzf#vim#with_preview({'options': ['--color', 'fg:-1,bg:-1,hl:230,fg+:3,bg+:233,hl+:229','--color', 'info:150,prompt:110,spinner:150,pointer:167,marker:174']}), <bang>0)

" Print group under cursor
function! SynStack()
  if !exists("*synstack")
    return
  endif
  echo map(synstack(line('.'), col('.')), 'synIDattr(v:val, "name")')
endfunc

let g:pear_tree_repeatable_expand = 0
let g:conoline_auto_enable = 1

let g:blamer_delay = 1500
let g:blamer_enabled = 0

let mapleader = ','

nnoremap <silent> <leader>t :TSHighlightCapturesUnderCursor<CR>

" Lua Stuff
lua <<EOF

local lsp_status = require('lsp-status')
lsp_status.register_progress()
lsp_status.config{
  indicator_errors = 'E',
  indicator_warnings = 'W',
  indicator_info = 'i',
  indicator_hint = '?',
  indicator_ok = 'Ok',
  current_function = false,
  diagnostics = false,
  status_symbol = '',
}

require('lualine').setup{
  options = {
    theme = 'modus_vivendi'
  },
  sections = {
    lualine_c = {'filename', {lsp_status.status}},
    lualine_x = {},
    lualine_y = {},
  },
  inactive_sections = {
  },
}
require('colorizer').setup()

local lspconfig = require'lspconfig'
local configs = require'lspconfig/configs'

local map = function(type, key, value)
  vim.api.nvim_buf_set_keymap(0,type,key,value,{noremap = true, silent = true});
end

function NvimTreeOSOpen()
  local lib = require "nvim-tree.lib"
  local node = lib.get_node_at_cursor()
  if node then
    vim.fn.jobstart("open '" .. node.absolute_path .. "' &", {detach = true})
  end
end

local custom_attach = function(client)
    lsp_status.on_attach(client)

    print("LanguageServer Attatched");
    if client.name ~= 'tsserver' then 
      vim.api.nvim_command("au BufWritePost <buffer> lua vim.lsp.buf.formatting_sync(nil, 3000)")
    end

    map('n','gD','<cmd>lua vim.lsp.buf.declaration()<CR>')
    map('n','gd','<cmd>lua vim.lsp.buf.definition()<CR>')
    map('n','gr','<cmd>lua vim.lsp.buf.references()<CR>')
    map('n','gs','<cmd>lua vim.lsp.buf.signature_help()<CR>')
    map('n','gi','<cmd>lua vim.lsp.buf.implementation()<CR>')
    map('n','gt','<cmd>lua vim.lsp.buf.type_definition()<CR>')
    map('n','<leader>gw','<cmd>lua vim.lsp.buf.document_symbol()<CR>')
    map('n','<leader>gW','<cmd>lua vim.lsp.buf.workspace_symbol()<CR>')
    map('n','<leader>ah','<cmd>lua vim.lsp.buf.hover()<CR>')
    map('n','<leader>af','<cmd>lua vim.lsp.buf.code_action()<CR>')
    map('n','<leader>ee','<cmd>lua vim.lsp.util.show_line_diagnostics()<CR>')
    map('n','rn','<cmd>lua vim.lsp.buf.rename()<CR>')
    map('n','<leader>ai','<cmd>lua vim.lsp.buf.incoming_calls()<CR>')
    map('n','<leader>ao','<cmd>lua vim.lsp.buf.outgoing_calls()<CR>')
    map('n', '<leader>f', '<cmd>lua vim.lsp.buf.formatting()<CR>')

    if client.resolved_capabilities.document_highlight then
      vim.api.nvim_command('augroup lsp_aucmds')
      vim.api.nvim_command('au CursorHold <buffer> lua vim.lsp.buf.document_highlight()')
      vim.api.nvim_command('au CursorMoved <buffer> lua vim.lsp.buf.clear_references()')
      vim.api.nvim_command('augroup END')
    end
end

lspconfig.zls.setup{on_attach=custom_attach}
lspconfig.rust_analyzer.setup{on_attach=custom_attach, settings={
  ['rust-analyzer'] = {
      cargo = {
        target = "wasm32-unknown-unknown",
      },
      checkOnSave = {
        target = "wasm32-unknown-unknown",
      }
    }
}}
lspconfig.clangd.setup{
  handlers = lsp_status.extensions.clangd.setup(),
  on_attach=custom_attach,
  init_options = {
    clangdFileStatus = true
  },
  cmd = {'clangd'},
  capabilities = lsp_status.capabilities,
}
lspconfig.jsonls.setup{
  on_attach=custom_attach,
  capabilities = lsp_status.capabilities,
}
lspconfig.html.setup{
  on_attach=custom_attach,
  capabilities = lsp_status.capabilities,
}
lspconfig.cssls.setup{
  on_attach=custom_attach,
  capabilities = lsp_status.capabilities,
}
lspconfig.sourcekit.setup{
  on_attach=custom_attach,
  capabilities = lsp_status.capabilities,
}
lspconfig.tsserver.setup{
  on_attach=custom_attach, 
  root_dir = vim.loop.cwd,
  capabilities = lsp_status.capabilities,
}

require'treesitter-context.config'.setup{
    enable = true, -- Enable this plugin (Can be enabled/disabled later via commands)
}

local parser_config = require "nvim-treesitter.parsers".get_parser_configs()
parser_config.zig = {
  install_info = {
    url = "https://github.com/maxxnino/tree-sitter-zig", -- local path or git repo
    files = {"src/parser.c"}
  },
}

require'nvim-treesitter.configs'.setup {
  highlight = {
    enable = true,
    additional_vim_regex_highlighting = false,
  }
}

local t = function(str)
  return vim.api.nvim_replace_termcodes(str, true, true, true)
end

local check_back_space = function()
    local col = vim.fn.col('.') - 1
    return col == 0 or vim.fn.getline('.'):sub(col, col):match('%s') 
end

_G.tab_complete = function()
  if vim.fn.pumvisible() == 1 then
    return vim.fn['compe#confirm']();
  else
    return t "<Tab>"
  end
end
-1f-1

vim.api.nvim_set_keymap("i", "<Tab>", "v:lua.tab_complete()", {expr = true})

require'compe'.setup {
  enabled = true;
  autocomplete = true;
  debug = false;
  min_length = 1;
  preselect = 'always';
  throttle_time = 80;
  source_timeout = 200;
  incomplete_delay = 400;
  max_abbr_width = 100;
  max_kind_width = 100;
  max_menu_width = 100;
  documentation = true;

  source = {
    path = true;
    buffer = true;
    calc = true;
    nvim_lsp = true;
    nvim_lua = true;
    spell = false;
    tags = true;
  };
}
EOF

set background=dark
let g:sitruuna_transparent_background = v:false
let g:sitruuna_theme = 'yellow'

colorscheme based

highlight! link LspDiagnosticsSignError Exception
highlight! link LspDiagnosticsSignWarning WarningMsg

hi CurrentWord guifg=NONE guibg=#303030 gui=underline

inoremap <silent><expr> <C-Space> compe#complete()
inoremap <silent><expr> <C-e>     compe#close('<C-e>')
inoremap <silent><expr> <C-f>     compe#scroll({ 'delta': +4 })
inoremap <silent><expr> <C-d>     compe#scroll({ 'delta': -4 })
